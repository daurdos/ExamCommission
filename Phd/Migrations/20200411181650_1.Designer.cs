// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Phd.Models;

namespace Phd.Migrations
{
    [DbContext(typeof(PhdContext))]
    [Migration("20200411181650_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Phd.Models.AcademicDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("AcademicDepartment");
                });

            modelBuilder.Entity("Phd.Models.BDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicDepartmentId");

                    b.Property<string>("Cypher");

                    b.Property<string>("NameEng");

                    b.Property<string>("NameKaz");

                    b.Property<string>("NameRus");

                    b.HasKey("Id");

                    b.HasIndex("AcademicDepartmentId");

                    b.ToTable("BDirection");
                });

            modelBuilder.Entity("Phd.Models.BMajor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcademicDepartmentId");

                    b.Property<string>("Cypher");

                    b.Property<string>("NameEng");

                    b.Property<string>("NameKaz");

                    b.Property<string>("NameRus");

                    b.HasKey("Id");

                    b.HasIndex("AcademicDepartmentId");

                    b.ToTable("BMajor");
                });

            modelBuilder.Entity("Phd.Models.BRExamCommission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BMajorId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BMajorId");

                    b.ToTable("BRExamCommission");
                });

            modelBuilder.Entity("Phd.Models.BRStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BRStudentGroupId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BRStudentGroupId");

                    b.ToTable("BRStudent");
                });

            modelBuilder.Entity("Phd.Models.BRStudentDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BRStudentId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("StudentDocTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BRStudentId");

                    b.HasIndex("StudentDocTypeId");

                    b.ToTable("BRStudentDoc");
                });

            modelBuilder.Entity("Phd.Models.BRStudentGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BRStudentId");

                    b.Property<string>("UserId");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("BRStudentId");

                    b.HasIndex("UserId");

                    b.ToTable("BRStudentGrade");
                });

            modelBuilder.Entity("Phd.Models.BRStudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BRExamCommissionId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BRExamCommissionId");

                    b.ToTable("BRStudentGroup");
                });

            modelBuilder.Entity("Phd.Models.CertificationCommission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CertificationCommission");
                });

            modelBuilder.Entity("Phd.Models.DiplomaFormOne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Damaged");

                    b.Property<bool>("Lost");

                    b.Property<string>("Number");

                    b.Property<int?>("PhdStudentId");

                    b.Property<int?>("PhdStudentManualId");

                    b.HasKey("Id");

                    b.HasIndex("PhdStudentId")
                        .IsUnique()
                        .HasFilter("[PhdStudentId] IS NOT NULL");

                    b.HasIndex("PhdStudentManualId")
                        .IsUnique()
                        .HasFilter("[PhdStudentManualId] IS NOT NULL");

                    b.ToTable("DiplomaFormOne");
                });

            modelBuilder.Entity("Phd.Models.DisCouncil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CouncilChairman")
                        .IsRequired();

                    b.Property<string>("CouncilMember")
                        .IsRequired();

                    b.Property<string>("CouncilSecretary")
                        .IsRequired();

                    b.Property<DateTime>("DefenceDate");

                    b.Property<string>("OrderNumber")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DisCouncil");
                });

            modelBuilder.Entity("Phd.Models.DisCouncilChairman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisCouncilId");

                    b.Property<string>("FullName");

                    b.Property<string>("FullNameEng");

                    b.Property<string>("FullNameKaz");

                    b.HasKey("Id");

                    b.HasIndex("DisCouncilId")
                        .IsUnique();

                    b.ToTable("DisCouncilChairman");
                });

            modelBuilder.Entity("Phd.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("Phd.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StudentId");

                    b.Property<string>("UserId");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("Phd.Models.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MajorCypher");

                    b.Property<string>("MajorCypherName");

                    b.Property<string>("MajorCypherNameEng");

                    b.Property<string>("MajorCypherNameKaz");

                    b.HasKey("Id");

                    b.ToTable("Major");
                });

            modelBuilder.Entity("Phd.Models.PhdStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComMemberNumberSpecific");

                    b.Property<int>("ComMemberNumberTotal");

                    b.Property<int>("DisCouncilId");

                    b.Property<string>("EducationDirection");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("FirstNameEng");

                    b.Property<string>("FirstNameKaz");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("LastNameEng");

                    b.Property<string>("LastNameKaz");

                    b.Property<string>("MajorCode");

                    b.Property<int>("MajorId");

                    b.Property<string>("MajorName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MiddleNameEng");

                    b.Property<string>("MiddleNameKaz");

                    b.Property<int>("RectorId");

                    b.Property<DateTime>("ThesisComDate");

                    b.Property<string>("ThesisNameEng");

                    b.Property<string>("ThesisNameKaz");

                    b.Property<string>("ThesisNameRus")
                        .IsRequired();

                    b.Property<int>("TrainingDirectionId");

                    b.HasKey("Id");

                    b.HasIndex("DisCouncilId");

                    b.HasIndex("MajorId");

                    b.HasIndex("RectorId");

                    b.HasIndex("TrainingDirectionId");

                    b.ToTable("PhdStudent");
                });

            modelBuilder.Entity("Phd.Models.PhdStudentManual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComMemberNumberSpecific");

                    b.Property<int>("ComMemberNumberTotal");

                    b.Property<int>("DisCouncilId");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("FirstNameEng");

                    b.Property<string>("FirstNameKaz");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("LastNameEng");

                    b.Property<string>("LastNameKaz");

                    b.Property<int>("MajorId");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MiddleNameEng");

                    b.Property<string>("MiddleNameKaz");

                    b.Property<int>("RectorId");

                    b.Property<DateTime>("ThesisComDate");

                    b.Property<string>("ThesisNameEng");

                    b.Property<string>("ThesisNameKaz");

                    b.Property<string>("ThesisNameRus")
                        .IsRequired();

                    b.Property<int>("TrainingDirectionId");

                    b.HasKey("Id");

                    b.HasIndex("DisCouncilId");

                    b.HasIndex("MajorId");

                    b.HasIndex("RectorId");

                    b.HasIndex("TrainingDirectionId");

                    b.ToTable("PhdStudentManual");
                });

            modelBuilder.Entity("Phd.Models.Rector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName");

                    b.Property<string>("FullNameEng");

                    b.Property<string>("FullNameKaz");

                    b.HasKey("Id");

                    b.ToTable("Rector");
                });

            modelBuilder.Entity("Phd.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertificationCommissionId");

                    b.Property<string>("FName");

                    b.Property<int>("FacultyId");

                    b.Property<string>("LName");

                    b.Property<string>("MName");

                    b.HasKey("Id");

                    b.HasIndex("CertificationCommissionId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Phd.Models.StudentDocType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("StudentDocType");
                });

            modelBuilder.Entity("Phd.Models.TrainingDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TrainingDirectionCypher");

                    b.Property<string>("TrainingDirectionCypherName");

                    b.Property<string>("TrainingDirectionCypherNameEng");

                    b.Property<string>("TrainingDirectionCypherNameKaz");

                    b.HasKey("Id");

                    b.ToTable("TrainingDirection");
                });

            modelBuilder.Entity("Phd.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcademicDepartmentId");

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("BMajorId");

                    b.Property<int>("BRExamCommissionId");

                    b.Property<int>("CertificationCommissionId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("DisCouncilId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("FacultyId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AcademicDepartmentId");

                    b.HasIndex("CertificationCommissionId");

                    b.HasIndex("DisCouncilId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Phd.Models.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PhdStudentId");

                    b.Property<int?>("PhdStudentManualId");

                    b.Property<string>("Voice");

                    b.HasKey("Id");

                    b.HasIndex("PhdStudentId");

                    b.HasIndex("PhdStudentManualId");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Phd.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Phd.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Phd.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Phd.Models.AcademicDepartment", b =>
                {
                    b.HasOne("Phd.Models.Faculty", "Faculty")
                        .WithMany("AcademicDepartment")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Phd.Models.BDirection", b =>
                {
                    b.HasOne("Phd.Models.AcademicDepartment", "AcademicDepartment")
                        .WithMany("BDirection")
                        .HasForeignKey("AcademicDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Phd.Models.BMajor", b =>
                {
                    b.HasOne("Phd.Models.AcademicDepartment", "AcademicDepartment")
                        .WithMany("BMajor")
                        .HasForeignKey("AcademicDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Phd.Models.BRExamCommission", b =>
                {
                    b.HasOne("Phd.Models.BMajor", "BMajor")
                        .WithMany("BRExamCommission")
                        .HasForeignKey("BMajorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Phd.Models.BRStudent", b =>
                {
                    b.HasOne("Phd.Models.BRStudentGroup")
                        .WithMany("BRStudent")
                        .HasForeignKey("BRStudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Phd.Models.BRStudentDoc", b =>
                {
                    b.HasOne("Phd.Models.BRStudent", "BRStudent")
                        .WithMany("BRStudentDoc")
                        .HasForeignKey("BRStudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.StudentDocType", "StudentDocType")
                        .WithMany("BRStudentDoc")
                        .HasForeignKey("StudentDocTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Phd.Models.BRStudentGrade", b =>
                {
                    b.HasOne("Phd.Models.BRStudent", "BRStudent")
                        .WithMany("BRStudentGrade")
                        .HasForeignKey("BRStudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Phd.Models.BRStudentGroup", b =>
                {
                    b.HasOne("Phd.Models.BRExamCommission", "BRExamCommission")
                        .WithMany("BRStudentGroup")
                        .HasForeignKey("BRExamCommissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Phd.Models.DiplomaFormOne", b =>
                {
                    b.HasOne("Phd.Models.PhdStudent", "PhdStudent")
                        .WithOne("DiplomaFormOne")
                        .HasForeignKey("Phd.Models.DiplomaFormOne", "PhdStudentId");

                    b.HasOne("Phd.Models.PhdStudentManual", "PhdStudentManual")
                        .WithOne("DiplomaFormOne")
                        .HasForeignKey("Phd.Models.DiplomaFormOne", "PhdStudentManualId");
                });

            modelBuilder.Entity("Phd.Models.DisCouncilChairman", b =>
                {
                    b.HasOne("Phd.Models.DisCouncil", "DisCouncil")
                        .WithOne("DisCouncilChairman")
                        .HasForeignKey("Phd.Models.DisCouncilChairman", "DisCouncilId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Phd.Models.Grade", b =>
                {
                    b.HasOne("Phd.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Phd.Models.PhdStudent", b =>
                {
                    b.HasOne("Phd.Models.DisCouncil", "DisCouncil")
                        .WithMany("PhdStudent")
                        .HasForeignKey("DisCouncilId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.Major", "Major")
                        .WithMany("PhdStudent")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.Rector", "Rector")
                        .WithMany("PhdStudent")
                        .HasForeignKey("RectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.TrainingDirection", "TrainingDirection")
                        .WithMany("PhdStudent")
                        .HasForeignKey("TrainingDirectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Phd.Models.PhdStudentManual", b =>
                {
                    b.HasOne("Phd.Models.DisCouncil", "DisCouncil")
                        .WithMany()
                        .HasForeignKey("DisCouncilId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.Major", "Major")
                        .WithMany()
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.Rector", "Rector")
                        .WithMany("PhdStudentManual")
                        .HasForeignKey("RectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.TrainingDirection", "TrainingDirection")
                        .WithMany()
                        .HasForeignKey("TrainingDirectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Phd.Models.Student", b =>
                {
                    b.HasOne("Phd.Models.CertificationCommission", "CertificationCommission")
                        .WithMany("Student")
                        .HasForeignKey("CertificationCommissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Phd.Models.User", b =>
                {
                    b.HasOne("Phd.Models.AcademicDepartment", "AcademicDepartment")
                        .WithMany("User")
                        .HasForeignKey("AcademicDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.CertificationCommission", "CertificationCommission")
                        .WithMany("User")
                        .HasForeignKey("CertificationCommissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.DisCouncil", "DisCouncil")
                        .WithMany("User")
                        .HasForeignKey("DisCouncilId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Phd.Models.Vote", b =>
                {
                    b.HasOne("Phd.Models.PhdStudent", "PhdStudent")
                        .WithMany("Vote")
                        .HasForeignKey("PhdStudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Phd.Models.PhdStudentManual")
                        .WithMany("Vote")
                        .HasForeignKey("PhdStudentManualId");
                });
#pragma warning restore 612, 618
        }
    }
}
